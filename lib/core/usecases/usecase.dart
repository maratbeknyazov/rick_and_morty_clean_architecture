// Импортируем пакет dartz — он нужен для использования типа Either.
// Either — это удобный способ возвращать либо результат, либо ошибку.
import 'package:dartz/dartz.dart';

// Импортируем класс Failure — он представляет ошибки (например, нет интернета, ошибка сервера и т.д.).
import 'package:rick_and_morty_flutter_3/core/error/failure.dart';

// Абстрактный класс UseCase — это шаблон (базовый класс) для всех вариантов использования (use cases).
// Use Case — это класс, который выполняет конкретное действие, например: получить список персонажей,
// найти персонажа, сохранить данные и т.д.
abstract class UseCase<Type, Params> {
  // Метод call (особенность Dart — можно вызывать объекты как функции).
  // Он принимает параметры (Params) и возвращает результат асинхронно (Future).
  // Результат упакован в Either:
  //   - Left(Failure) — если произошла ошибка,
  //   - Right(Type) — если всё прошло успешно и вернулся результат нужного типа.
  Future<Either<Failure, Type>> call(Params params);
}
